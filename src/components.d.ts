/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  Response,
} from './components/crds-tithe-challenge/crds-tithe-challenge.interface';

export namespace Components {
  interface CrdsButton {
    'block': boolean;
    'color': string;
    'disabled': boolean;
    'display'?: string;
    'href'?: string;
    'icon': string;
    'iconAlign': string;
    'iconColor': string;
    'iconSize': string;
    'onClick'?: (event: MouseEvent) => void;
    'secondary': boolean;
    'size'?: string;
    'text': string;
  }
  interface CrdsDefaultCard {
    'body': string;
    'buttonSrc': string;
    'category': string;
    'contentType': string;
    'heading': string;
    'iconLabel': string;
    'imageSrc': string;
    'meta': string;
    'thumbnailSrc': string;
    'url': string;
  }
  interface CrdsGreeting {
    'defaultName': string;
  }
  interface CrdsGroupList {}
  interface CrdsGroupPrivacyToggle {
    'groupId': number;
    'isPublic': boolean;
  }
  interface CrdsGroupRenew {
    'daysToExpiration': number;
    'groupIdsString': string;
  }
  interface CrdsGroupRenewButton {
    'daysToExpiration': number;
    'groupId': number;
  }
  interface CrdsHeartButton {
    /**
    * Unique identifier for likeable resource
    */
    'contentfulId': string;
    /**
    * Total number of hearts
    */
    'count': number;
    /**
    * Boolean indicating whether likeable resource has been liked
    */
    'isLiked': boolean;
    /**
    * Cache key for localStorage
    */
    'storageKey': string;
  }
  interface CrdsIcon {
    'color': string;
    'name': string;
    'size': string;
  }
  interface CrdsImage {
    'size': string;
    'src': string;
  }
  interface CrdsImageTitleCutout {
    'cardTitle': string;
    'imageHref': string;
    'imageUrl': string;
    'titleHref': string;
  }
  interface CrdsLabel {
    'text': string;
    'tint': string;
  }
  interface CrdsMediaCard {
    'body': string;
    'category': string;
    'contentLayout': string;
    'contentType': string;
    'heading': string;
    'iconLabel': string;
    'imageSrc': string;
    'meta': string;
    'thumbnailSrc': string;
    'truncateLength': number;
    'url': string;
  }
  interface CrdsModal {
    'isActive': boolean;
    'label': string;
    'onModalClose': Function;
  }
  interface CrdsRecommendedContent {}
  interface CrdsSharedFooter {
    'env': string;
    'src': string;
  }
  interface CrdsSharedHeader {
    'env': string;
    'src': string;
  }
  interface CrdsSiteHappenings {}
  interface CrdsSiteSelect {
    'cardSiteId': number;
  }
  interface CrdsSnailTrail {
    'env': string;
    'name': string;
    'src': string;
  }
  interface CrdsSnailTrailLink {
    'automationId': string;
    'href': string;
    'isActive': boolean;
  }
  interface CrdsSubscribe {
    'label': string;
    'src': string;
  }
  interface CrdsTitheChallenge {
    'selectedFeeling': Response;
  }
  interface CrdsVideo {
    'active': boolean;
    'shadow': boolean;
    'theme': string;
    'transcript': string;
    'youtubeId': string;
  }
  interface GiveNav {
    'data': any;
    'isNavShowing': boolean;
  }
  interface GlobalNav {
    'data': any;
    'env': string;
  }
  interface MainNav {
    'data': any;
    'isNavShowing': boolean;
    'promoData': string;
  }
  interface MySite {}
  interface NavCtas {
    'data': string;
  }
  interface NavSection {
    'handleClick': Function;
    'isActive': boolean;
    'sectionName': string;
  }
  interface NavSectionSubnav {
    'data': any;
    'handleBackClick': Function;
    'isActive': boolean;
    'subNavName': string;
  }
  interface ProfileNav {
    'data': any;
    'handleSignOut': Function;
    'isNavShowing': boolean;
    'user': any;
  }
}

declare global {


  interface HTMLCrdsButtonElement extends Components.CrdsButton, HTMLStencilElement {}
  var HTMLCrdsButtonElement: {
    prototype: HTMLCrdsButtonElement;
    new (): HTMLCrdsButtonElement;
  };

  interface HTMLCrdsDefaultCardElement extends Components.CrdsDefaultCard, HTMLStencilElement {}
  var HTMLCrdsDefaultCardElement: {
    prototype: HTMLCrdsDefaultCardElement;
    new (): HTMLCrdsDefaultCardElement;
  };

  interface HTMLCrdsGreetingElement extends Components.CrdsGreeting, HTMLStencilElement {}
  var HTMLCrdsGreetingElement: {
    prototype: HTMLCrdsGreetingElement;
    new (): HTMLCrdsGreetingElement;
  };

  interface HTMLCrdsGroupListElement extends Components.CrdsGroupList, HTMLStencilElement {}
  var HTMLCrdsGroupListElement: {
    prototype: HTMLCrdsGroupListElement;
    new (): HTMLCrdsGroupListElement;
  };

  interface HTMLCrdsGroupPrivacyToggleElement extends Components.CrdsGroupPrivacyToggle, HTMLStencilElement {}
  var HTMLCrdsGroupPrivacyToggleElement: {
    prototype: HTMLCrdsGroupPrivacyToggleElement;
    new (): HTMLCrdsGroupPrivacyToggleElement;
  };

  interface HTMLCrdsGroupRenewElement extends Components.CrdsGroupRenew, HTMLStencilElement {}
  var HTMLCrdsGroupRenewElement: {
    prototype: HTMLCrdsGroupRenewElement;
    new (): HTMLCrdsGroupRenewElement;
  };

  interface HTMLCrdsGroupRenewButtonElement extends Components.CrdsGroupRenewButton, HTMLStencilElement {}
  var HTMLCrdsGroupRenewButtonElement: {
    prototype: HTMLCrdsGroupRenewButtonElement;
    new (): HTMLCrdsGroupRenewButtonElement;
  };

  interface HTMLCrdsHeartButtonElement extends Components.CrdsHeartButton, HTMLStencilElement {}
  var HTMLCrdsHeartButtonElement: {
    prototype: HTMLCrdsHeartButtonElement;
    new (): HTMLCrdsHeartButtonElement;
  };

  interface HTMLCrdsIconElement extends Components.CrdsIcon, HTMLStencilElement {}
  var HTMLCrdsIconElement: {
    prototype: HTMLCrdsIconElement;
    new (): HTMLCrdsIconElement;
  };

  interface HTMLCrdsImageElement extends Components.CrdsImage, HTMLStencilElement {}
  var HTMLCrdsImageElement: {
    prototype: HTMLCrdsImageElement;
    new (): HTMLCrdsImageElement;
  };

  interface HTMLCrdsImageTitleCutoutElement extends Components.CrdsImageTitleCutout, HTMLStencilElement {}
  var HTMLCrdsImageTitleCutoutElement: {
    prototype: HTMLCrdsImageTitleCutoutElement;
    new (): HTMLCrdsImageTitleCutoutElement;
  };

  interface HTMLCrdsLabelElement extends Components.CrdsLabel, HTMLStencilElement {}
  var HTMLCrdsLabelElement: {
    prototype: HTMLCrdsLabelElement;
    new (): HTMLCrdsLabelElement;
  };

  interface HTMLCrdsMediaCardElement extends Components.CrdsMediaCard, HTMLStencilElement {}
  var HTMLCrdsMediaCardElement: {
    prototype: HTMLCrdsMediaCardElement;
    new (): HTMLCrdsMediaCardElement;
  };

  interface HTMLCrdsModalElement extends Components.CrdsModal, HTMLStencilElement {}
  var HTMLCrdsModalElement: {
    prototype: HTMLCrdsModalElement;
    new (): HTMLCrdsModalElement;
  };

  interface HTMLCrdsRecommendedContentElement extends Components.CrdsRecommendedContent, HTMLStencilElement {}
  var HTMLCrdsRecommendedContentElement: {
    prototype: HTMLCrdsRecommendedContentElement;
    new (): HTMLCrdsRecommendedContentElement;
  };

  interface HTMLCrdsSharedFooterElement extends Components.CrdsSharedFooter, HTMLStencilElement {}
  var HTMLCrdsSharedFooterElement: {
    prototype: HTMLCrdsSharedFooterElement;
    new (): HTMLCrdsSharedFooterElement;
  };

  interface HTMLCrdsSharedHeaderElement extends Components.CrdsSharedHeader, HTMLStencilElement {}
  var HTMLCrdsSharedHeaderElement: {
    prototype: HTMLCrdsSharedHeaderElement;
    new (): HTMLCrdsSharedHeaderElement;
  };

  interface HTMLCrdsSiteHappeningsElement extends Components.CrdsSiteHappenings, HTMLStencilElement {}
  var HTMLCrdsSiteHappeningsElement: {
    prototype: HTMLCrdsSiteHappeningsElement;
    new (): HTMLCrdsSiteHappeningsElement;
  };

  interface HTMLCrdsSiteSelectElement extends Components.CrdsSiteSelect, HTMLStencilElement {}
  var HTMLCrdsSiteSelectElement: {
    prototype: HTMLCrdsSiteSelectElement;
    new (): HTMLCrdsSiteSelectElement;
  };

  interface HTMLCrdsSnailTrailElement extends Components.CrdsSnailTrail, HTMLStencilElement {}
  var HTMLCrdsSnailTrailElement: {
    prototype: HTMLCrdsSnailTrailElement;
    new (): HTMLCrdsSnailTrailElement;
  };

  interface HTMLCrdsSnailTrailLinkElement extends Components.CrdsSnailTrailLink, HTMLStencilElement {}
  var HTMLCrdsSnailTrailLinkElement: {
    prototype: HTMLCrdsSnailTrailLinkElement;
    new (): HTMLCrdsSnailTrailLinkElement;
  };

  interface HTMLCrdsSubscribeElement extends Components.CrdsSubscribe, HTMLStencilElement {}
  var HTMLCrdsSubscribeElement: {
    prototype: HTMLCrdsSubscribeElement;
    new (): HTMLCrdsSubscribeElement;
  };

  interface HTMLCrdsTitheChallengeElement extends Components.CrdsTitheChallenge, HTMLStencilElement {}
  var HTMLCrdsTitheChallengeElement: {
    prototype: HTMLCrdsTitheChallengeElement;
    new (): HTMLCrdsTitheChallengeElement;
  };

  interface HTMLCrdsVideoElement extends Components.CrdsVideo, HTMLStencilElement {}
  var HTMLCrdsVideoElement: {
    prototype: HTMLCrdsVideoElement;
    new (): HTMLCrdsVideoElement;
  };

  interface HTMLGiveNavElement extends Components.GiveNav, HTMLStencilElement {}
  var HTMLGiveNavElement: {
    prototype: HTMLGiveNavElement;
    new (): HTMLGiveNavElement;
  };

  interface HTMLGlobalNavElement extends Components.GlobalNav, HTMLStencilElement {}
  var HTMLGlobalNavElement: {
    prototype: HTMLGlobalNavElement;
    new (): HTMLGlobalNavElement;
  };

  interface HTMLMainNavElement extends Components.MainNav, HTMLStencilElement {}
  var HTMLMainNavElement: {
    prototype: HTMLMainNavElement;
    new (): HTMLMainNavElement;
  };

  interface HTMLMySiteElement extends Components.MySite, HTMLStencilElement {}
  var HTMLMySiteElement: {
    prototype: HTMLMySiteElement;
    new (): HTMLMySiteElement;
  };

  interface HTMLNavCtasElement extends Components.NavCtas, HTMLStencilElement {}
  var HTMLNavCtasElement: {
    prototype: HTMLNavCtasElement;
    new (): HTMLNavCtasElement;
  };

  interface HTMLNavSectionElement extends Components.NavSection, HTMLStencilElement {}
  var HTMLNavSectionElement: {
    prototype: HTMLNavSectionElement;
    new (): HTMLNavSectionElement;
  };

  interface HTMLNavSectionSubnavElement extends Components.NavSectionSubnav, HTMLStencilElement {}
  var HTMLNavSectionSubnavElement: {
    prototype: HTMLNavSectionSubnavElement;
    new (): HTMLNavSectionSubnavElement;
  };

  interface HTMLProfileNavElement extends Components.ProfileNav, HTMLStencilElement {}
  var HTMLProfileNavElement: {
    prototype: HTMLProfileNavElement;
    new (): HTMLProfileNavElement;
  };
  interface HTMLElementTagNameMap {
    'crds-button': HTMLCrdsButtonElement;
    'crds-default-card': HTMLCrdsDefaultCardElement;
    'crds-greeting': HTMLCrdsGreetingElement;
    'crds-group-list': HTMLCrdsGroupListElement;
    'crds-group-privacy-toggle': HTMLCrdsGroupPrivacyToggleElement;
    'crds-group-renew': HTMLCrdsGroupRenewElement;
    'crds-group-renew-button': HTMLCrdsGroupRenewButtonElement;
    'crds-heart-button': HTMLCrdsHeartButtonElement;
    'crds-icon': HTMLCrdsIconElement;
    'crds-image': HTMLCrdsImageElement;
    'crds-image-title-cutout': HTMLCrdsImageTitleCutoutElement;
    'crds-label': HTMLCrdsLabelElement;
    'crds-media-card': HTMLCrdsMediaCardElement;
    'crds-modal': HTMLCrdsModalElement;
    'crds-recommended-content': HTMLCrdsRecommendedContentElement;
    'crds-shared-footer': HTMLCrdsSharedFooterElement;
    'crds-shared-header': HTMLCrdsSharedHeaderElement;
    'crds-site-happenings': HTMLCrdsSiteHappeningsElement;
    'crds-site-select': HTMLCrdsSiteSelectElement;
    'crds-snail-trail': HTMLCrdsSnailTrailElement;
    'crds-snail-trail-link': HTMLCrdsSnailTrailLinkElement;
    'crds-subscribe': HTMLCrdsSubscribeElement;
    'crds-tithe-challenge': HTMLCrdsTitheChallengeElement;
    'crds-video': HTMLCrdsVideoElement;
    'give-nav': HTMLGiveNavElement;
    'global-nav': HTMLGlobalNavElement;
    'main-nav': HTMLMainNavElement;
    'my-site': HTMLMySiteElement;
    'nav-ctas': HTMLNavCtasElement;
    'nav-section': HTMLNavSectionElement;
    'nav-section-subnav': HTMLNavSectionSubnavElement;
    'profile-nav': HTMLProfileNavElement;
  }
}

declare namespace LocalJSX {
  interface CrdsButton {
    'block'?: boolean;
    'color'?: string;
    'disabled'?: boolean;
    'display'?: string;
    'href'?: string;
    'icon'?: string;
    'iconAlign'?: string;
    'iconColor'?: string;
    'iconSize'?: string;
    'onClick'?: (event: MouseEvent) => void;
    'secondary'?: boolean;
    'size'?: string;
    'text'?: string;
  }
  interface CrdsDefaultCard {
    'body'?: string;
    'buttonSrc'?: string;
    'category'?: string;
    'contentType'?: string;
    'heading'?: string;
    'iconLabel'?: string;
    'imageSrc'?: string;
    'meta'?: string;
    'thumbnailSrc'?: string;
    'url'?: string;
  }
  interface CrdsGreeting {
    'defaultName'?: string;
  }
  interface CrdsGroupList {}
  interface CrdsGroupPrivacyToggle {
    'groupId'?: number;
    'isPublic'?: boolean;
  }
  interface CrdsGroupRenew {
    'daysToExpiration'?: number;
    'groupIdsString'?: string;
  }
  interface CrdsGroupRenewButton {
    'daysToExpiration'?: number;
    'groupId'?: number;
  }
  interface CrdsHeartButton {
    /**
    * Unique identifier for likeable resource
    */
    'contentfulId'?: string;
    /**
    * Total number of hearts
    */
    'count'?: number;
    /**
    * Boolean indicating whether likeable resource has been liked
    */
    'isLiked'?: boolean;
    /**
    * Cache key for localStorage
    */
    'storageKey'?: string;
  }
  interface CrdsIcon {
    'color'?: string;
    'name'?: string;
    'size'?: string;
  }
  interface CrdsImage {
    'size'?: string;
    'src'?: string;
  }
  interface CrdsImageTitleCutout {
    'cardTitle'?: string;
    'imageHref'?: string;
    'imageUrl'?: string;
    'titleHref'?: string;
  }
  interface CrdsLabel {
    'text'?: string;
    'tint'?: string;
  }
  interface CrdsMediaCard {
    'body'?: string;
    'category'?: string;
    'contentLayout'?: string;
    'contentType'?: string;
    'heading'?: string;
    'iconLabel'?: string;
    'imageSrc'?: string;
    'meta'?: string;
    'thumbnailSrc'?: string;
    'truncateLength'?: number;
    'url'?: string;
  }
  interface CrdsModal {
    'isActive'?: boolean;
    'label'?: string;
    'onModalClose'?: Function;
  }
  interface CrdsRecommendedContent {}
  interface CrdsSharedFooter {
    'env'?: string;
    'src'?: string;
  }
  interface CrdsSharedHeader {
    'env'?: string;
    'src'?: string;
  }
  interface CrdsSiteHappenings {}
  interface CrdsSiteSelect {
    'cardSiteId'?: number;
    'onSiteSet'?: (event: CustomEvent<any>) => void;
  }
  interface CrdsSnailTrail {
    'env'?: string;
    'name'?: string;
    'src'?: string;
  }
  interface CrdsSnailTrailLink {
    'automationId'?: string;
    'href'?: string;
    'isActive'?: boolean;
  }
  interface CrdsSubscribe {
    'label'?: string;
    'src'?: string;
  }
  interface CrdsTitheChallenge {
    'selectedFeeling'?: Response;
  }
  interface CrdsVideo {
    'active'?: boolean;
    'shadow'?: boolean;
    'theme'?: string;
    'transcript'?: string;
    'youtubeId'?: string;
  }
  interface GiveNav {
    'data'?: any;
    'isNavShowing'?: boolean;
  }
  interface GlobalNav {
    'data'?: any;
    'env'?: string;
  }
  interface MainNav {
    'data'?: any;
    'isNavShowing'?: boolean;
    'promoData'?: string;
  }
  interface MySite {}
  interface NavCtas {
    'data'?: string;
  }
  interface NavSection {
    'handleClick'?: Function;
    'isActive'?: boolean;
    'sectionName'?: string;
  }
  interface NavSectionSubnav {
    'data'?: any;
    'handleBackClick'?: Function;
    'isActive'?: boolean;
    'subNavName'?: string;
  }
  interface ProfileNav {
    'data'?: any;
    'handleSignOut'?: Function;
    'isNavShowing'?: boolean;
    'user'?: any;
  }

  interface IntrinsicElements {
    'crds-button': CrdsButton;
    'crds-default-card': CrdsDefaultCard;
    'crds-greeting': CrdsGreeting;
    'crds-group-list': CrdsGroupList;
    'crds-group-privacy-toggle': CrdsGroupPrivacyToggle;
    'crds-group-renew': CrdsGroupRenew;
    'crds-group-renew-button': CrdsGroupRenewButton;
    'crds-heart-button': CrdsHeartButton;
    'crds-icon': CrdsIcon;
    'crds-image': CrdsImage;
    'crds-image-title-cutout': CrdsImageTitleCutout;
    'crds-label': CrdsLabel;
    'crds-media-card': CrdsMediaCard;
    'crds-modal': CrdsModal;
    'crds-recommended-content': CrdsRecommendedContent;
    'crds-shared-footer': CrdsSharedFooter;
    'crds-shared-header': CrdsSharedHeader;
    'crds-site-happenings': CrdsSiteHappenings;
    'crds-site-select': CrdsSiteSelect;
    'crds-snail-trail': CrdsSnailTrail;
    'crds-snail-trail-link': CrdsSnailTrailLink;
    'crds-subscribe': CrdsSubscribe;
    'crds-tithe-challenge': CrdsTitheChallenge;
    'crds-video': CrdsVideo;
    'give-nav': GiveNav;
    'global-nav': GlobalNav;
    'main-nav': MainNav;
    'my-site': MySite;
    'nav-ctas': NavCtas;
    'nav-section': NavSection;
    'nav-section-subnav': NavSectionSubnav;
    'profile-nav': ProfileNav;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'crds-button': LocalJSX.CrdsButton & JSXBase.HTMLAttributes<HTMLCrdsButtonElement>;
      'crds-default-card': LocalJSX.CrdsDefaultCard & JSXBase.HTMLAttributes<HTMLCrdsDefaultCardElement>;
      'crds-greeting': LocalJSX.CrdsGreeting & JSXBase.HTMLAttributes<HTMLCrdsGreetingElement>;
      'crds-group-list': LocalJSX.CrdsGroupList & JSXBase.HTMLAttributes<HTMLCrdsGroupListElement>;
      'crds-group-privacy-toggle': LocalJSX.CrdsGroupPrivacyToggle & JSXBase.HTMLAttributes<HTMLCrdsGroupPrivacyToggleElement>;
      'crds-group-renew': LocalJSX.CrdsGroupRenew & JSXBase.HTMLAttributes<HTMLCrdsGroupRenewElement>;
      'crds-group-renew-button': LocalJSX.CrdsGroupRenewButton & JSXBase.HTMLAttributes<HTMLCrdsGroupRenewButtonElement>;
      'crds-heart-button': LocalJSX.CrdsHeartButton & JSXBase.HTMLAttributes<HTMLCrdsHeartButtonElement>;
      'crds-icon': LocalJSX.CrdsIcon & JSXBase.HTMLAttributes<HTMLCrdsIconElement>;
      'crds-image': LocalJSX.CrdsImage & JSXBase.HTMLAttributes<HTMLCrdsImageElement>;
      'crds-image-title-cutout': LocalJSX.CrdsImageTitleCutout & JSXBase.HTMLAttributes<HTMLCrdsImageTitleCutoutElement>;
      'crds-label': LocalJSX.CrdsLabel & JSXBase.HTMLAttributes<HTMLCrdsLabelElement>;
      'crds-media-card': LocalJSX.CrdsMediaCard & JSXBase.HTMLAttributes<HTMLCrdsMediaCardElement>;
      'crds-modal': LocalJSX.CrdsModal & JSXBase.HTMLAttributes<HTMLCrdsModalElement>;
      'crds-recommended-content': LocalJSX.CrdsRecommendedContent & JSXBase.HTMLAttributes<HTMLCrdsRecommendedContentElement>;
      'crds-shared-footer': LocalJSX.CrdsSharedFooter & JSXBase.HTMLAttributes<HTMLCrdsSharedFooterElement>;
      'crds-shared-header': LocalJSX.CrdsSharedHeader & JSXBase.HTMLAttributes<HTMLCrdsSharedHeaderElement>;
      'crds-site-happenings': LocalJSX.CrdsSiteHappenings & JSXBase.HTMLAttributes<HTMLCrdsSiteHappeningsElement>;
      'crds-site-select': LocalJSX.CrdsSiteSelect & JSXBase.HTMLAttributes<HTMLCrdsSiteSelectElement>;
      'crds-snail-trail': LocalJSX.CrdsSnailTrail & JSXBase.HTMLAttributes<HTMLCrdsSnailTrailElement>;
      'crds-snail-trail-link': LocalJSX.CrdsSnailTrailLink & JSXBase.HTMLAttributes<HTMLCrdsSnailTrailLinkElement>;
      'crds-subscribe': LocalJSX.CrdsSubscribe & JSXBase.HTMLAttributes<HTMLCrdsSubscribeElement>;
      'crds-tithe-challenge': LocalJSX.CrdsTitheChallenge & JSXBase.HTMLAttributes<HTMLCrdsTitheChallengeElement>;
      'crds-video': LocalJSX.CrdsVideo & JSXBase.HTMLAttributes<HTMLCrdsVideoElement>;
      'give-nav': LocalJSX.GiveNav & JSXBase.HTMLAttributes<HTMLGiveNavElement>;
      'global-nav': LocalJSX.GlobalNav & JSXBase.HTMLAttributes<HTMLGlobalNavElement>;
      'main-nav': LocalJSX.MainNav & JSXBase.HTMLAttributes<HTMLMainNavElement>;
      'my-site': LocalJSX.MySite & JSXBase.HTMLAttributes<HTMLMySiteElement>;
      'nav-ctas': LocalJSX.NavCtas & JSXBase.HTMLAttributes<HTMLNavCtasElement>;
      'nav-section': LocalJSX.NavSection & JSXBase.HTMLAttributes<HTMLNavSectionElement>;
      'nav-section-subnav': LocalJSX.NavSectionSubnav & JSXBase.HTMLAttributes<HTMLNavSectionSubnavElement>;
      'profile-nav': LocalJSX.ProfileNav & JSXBase.HTMLAttributes<HTMLProfileNavElement>;
    }
  }
}


